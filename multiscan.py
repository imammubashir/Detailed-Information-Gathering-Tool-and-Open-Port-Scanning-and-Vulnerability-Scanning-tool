import socket
import subprocess
import dns.resolver
from concurrent.futures import ThreadPoolExecutor

def domain_lookup(domain):
    """
    Resolves a domain to its IP address.
    """
    try:
        ip = socket.gethostbyname(domain)
        print(f"[INFO] IP address for {domain}: {ip}")
        return ip
    except socket.gaierror as e:
        print(f"[ERROR] Could not resolve domain: {domain}. Error: {e}")
        return None

def whois_lookup(domain):
    """
    Performs a WHOIS lookup.
    """
    print(f"\n[INFO] Performing WHOIS lookup for {domain}...")
    try:
        result = subprocess.check_output(["whois", domain], text=True)
        print(result)
    except Exception as e:
        print(f"[ERROR] WHOIS lookup failed. Error: {e}")

def dns_lookup(domain):
    """
    Performs DNS lookups for NS and MX records.
    """
    print(f"\n[INFO] Performing DNS lookups for {domain}...")
    try:
        # NS records
        print("[INFO] Name Servers:")
        ns_records = dns.resolver.resolve(domain, "NS")
        for ns in ns_records:
            print(f"  - {ns}")

        # MX records
        print("\n[INFO] Mail Exchange (MX) Records:")
        mx_records = dns.resolver.resolve(domain, "MX")
        for mx in mx_records:
            print(f"  - {mx}")

        # A record
        print("\n[INFO] A Records (IP Address):")
        a_records = dns.resolver.resolve(domain, "A")
        for a in a_records:
            print(f"  - {a}")
    except Exception as e:
        print(f"[ERROR] DNS lookup failed. Error: {e}")

def scan_port(target, port):
    """
    Scans a single port on the target system.
    """
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(0.1)  # Short timeout for faster scanning
            if s.connect_ex((target, port)) == 0:
                print(f"[OPEN] Port {port} is open.")
                return port
    except Exception as e:
        pass
    return None

def scan_ports(target, port_range):
    """
    Scans a range of ports on the target system using multithreading.
    """
    print(f"\n[INFO] Scanning ports on {target}...")
    open_ports = []
    with ThreadPoolExecutor(max_workers=50) as executor:  # 50 concurrent threads
        results = executor.map(lambda p: scan_port(target, p), port_range)
        for port in results:
            if port:
                open_ports.append(port)
    print(f"[INFO] Open ports found: {open_ports}")
    return open_ports

def vulnerability_check(open_ports):
    """
    Checks for known vulnerabilities in common ports.
    """
    vulnerabilities = {
        21: "FTP - Weak credentials or anonymous access.",
        22: "SSH - Weak credentials or outdated version.",
        23: "Telnet - Insecure protocol.",
        80: "HTTP - Unsecured traffic or outdated software.",
        443: "HTTPS - SSL/TLS vulnerabilities.",
        3389: "RDP - Remote Desktop vulnerabilities."
    }
    print("\n[INFO] Performing vulnerability assessment...")
    for port in open_ports:
        if port in vulnerabilities:
            print(f"[WARNING] Port {port}: {vulnerabilities[port]}")

def nmap_scan(target):
    """
    Simulates an Nmap scan for a target IP.
    """
    print(f"\n[INFO] Performing Nmap scan on {target}...")
    try:
        result = subprocess.check_output(["nmap", "-sV", target], text=True)
        print(result)
    except Exception as e:
        print(f"[ERROR] Nmap scan failed. Error: {e}")

if __name__ == "__main__":
    print("Advanced Reconnaissance and Vulnerability Scanner")
    target_domain = input("Enter the domain to analyze: ")

    # Resolve domain to IP
    target_ip = domain_lookup(target_domain)
    if not target_ip:
        print("[ERROR] Exiting due to unresolved domain.")
        exit(1)

    # Perform WHOIS lookup
    whois_lookup(target_domain)

    # Perform DNS lookups
    dns_lookup(target_domain)

    # Scan for open ports
    open_ports = scan_ports(target_ip, range(1, 1025))  # Scanning ports 1-1024

    # Perform vulnerability assessment
    vulnerability_check(open_ports)

    # Perform Nmap scan
    nmap_scan(target_ip)
